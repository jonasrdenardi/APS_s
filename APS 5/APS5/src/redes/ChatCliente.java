package redes;

import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

public class ChatCliente extends javax.swing.JFrame {

    PrintWriter escritor;
    Socket socket;
    String nome;
    String ip;
    int porta;
    Scanner leitor;
    boolean isNormalToNormal = true;
    boolean isMorseToMorse = false;
    boolean isNormalToMorse = false;
    boolean isMorseToNormal = false;
    private String txtmorse = "";

    private class EscutaServidor implements Runnable {

        @Override
        public void run() {
            try {
                String texto;
                while ((texto = leitor.nextLine()) != null) {
                    txtaReceber.append(texto + "\n");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage());
            }
        }
    }

    public ChatCliente(String nome,String ip,int porta) {
        this.nome = nome;
        this.ip = ip;
        this.porta = porta;
        initComponents();
        txtaReceber.setEditable(false);
        setVisible(true);
        setTitle(nome);
        configurarRede();
        btnNormalToNormal.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtaReceber = new javax.swing.JTextArea();
        txtEnviar = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();
        btnNormalToNormal = new javax.swing.JButton();
        btnMorseToMorse = new javax.swing.JButton();
        btnNormalToMorse = new javax.swing.JButton();
        btnMorseToNormal = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtaReceber.setColumns(20);
        txtaReceber.setRows(5);
        jScrollPane2.setViewportView(txtaReceber);

        txtEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEnviarActionPerformed(evt);
            }
        });
        txtEnviar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEnviarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEnviarKeyReleased(evt);
            }
        });

        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        btnNormalToNormal.setText("Normal -> Normal");
        btnNormalToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNormalToNormalActionPerformed(evt);
            }
        });

        btnMorseToMorse.setText("Morse -> Morse");
        btnMorseToMorse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMorseToMorseActionPerformed(evt);
            }
        });

        btnNormalToMorse.setText("Normal -> Morse");
        btnNormalToMorse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNormalToMorseActionPerformed(evt);
            }
        });

        btnMorseToNormal.setText("Morse -> Normal");
        btnMorseToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMorseToNormalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEnviar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNormalToNormal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMorseToMorse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNormalToMorse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMorseToNormal)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNormalToNormal)
                    .addComponent(btnMorseToMorse)
                    .addComponent(btnNormalToMorse)
                    .addComponent(btnMorseToNormal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        if (isNormalToNormal || isMorseToMorse) {
            escritor.println(nome + ": " + txtEnviar.getText());
            escritor.flush();
            txtEnviar.setText("");
            txtEnviar.requestFocus();
        } else if (isNormalToMorse) {
            escritor.println(nome + ": " + ConverterNormaltoMorse(txtEnviar.getText()));
            escritor.flush();
            txtEnviar.setText("");
            txtEnviar.requestFocus();
        } else if(isMorseToNormal){
            escritor.println(nome + ": " + ConverterMorsetoNormal(txtEnviar.getText()));
            escritor.flush();
            txtEnviar.setText("");
            txtEnviar.requestFocus();
        }
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void btnNormalToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNormalToNormalActionPerformed
        // Habilita/Desabilita botões e setas a configurações dos botões
        btnNormalToNormal.setEnabled(false);
        isNormalToNormal = true;
        btnMorseToMorse.setEnabled(true);
        isMorseToMorse = false;
        btnNormalToMorse.setEnabled(true);
        isNormalToMorse = false;
        btnMorseToNormal.setEnabled(true);
        isMorseToNormal = false;
        //Limpa o txtEnviar a cada troca de funcao
        txtEnviar.setText("");
    }//GEN-LAST:event_btnNormalToNormalActionPerformed

    private void btnMorseToMorseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMorseToMorseActionPerformed
        // Habilita/Desabilita botões e setas a configurações dos botões
        btnNormalToNormal.setEnabled(true);
        isNormalToNormal = false;
        btnMorseToMorse.setEnabled(false);
        isMorseToMorse = true;
        btnNormalToMorse.setEnabled(true);
        isNormalToMorse = false;
        btnMorseToNormal.setEnabled(true);
        isMorseToNormal = false;
        txtEnviar.setText("");
        //Limpa o txtEnviar a cada troca de funcao
    }//GEN-LAST:event_btnMorseToMorseActionPerformed

    private void txtEnviarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEnviarKeyPressed
        // Faz o processo para a conversão apenas se o botao morse estiver ativo
        if (isMorseToMorse || isMorseToNormal) {
            // Pega o texto do txtEnviar no Keypressed
            txtmorse = txtEnviar.getText();
        }
    }//GEN-LAST:event_txtEnviarKeyPressed

    private void txtEnviarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEnviarKeyReleased
        // Faz o processo para a conversão apenas se o botao morse estiver ativo
        if (isMorseToMorse || isMorseToNormal) {
            // Limpa o txtEnviar
            txtEnviar.setText("");
            // No KeyRealeased coloca no txtEnviar o texto antigo mais a conversao nova
            txtEnviar.setText(txtmorse + ConverterToMorseTempoReal(evt));
        }
    }//GEN-LAST:event_txtEnviarKeyReleased

    private void btnNormalToMorseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNormalToMorseActionPerformed
        // Habilita/Desabilita botões e setas a configurações dos botões
        btnNormalToNormal.setEnabled(true);
        isNormalToNormal = false;
        btnMorseToMorse.setEnabled(true);
        isMorseToMorse = false;
        btnNormalToMorse.setEnabled(false);
        isNormalToMorse = true;
        btnMorseToNormal.setEnabled(true);
        isMorseToNormal = false;
        txtEnviar.setText("");
        //Limpa o txtEnviar a cada troca de funcao
    }//GEN-LAST:event_btnNormalToMorseActionPerformed

    private void btnMorseToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMorseToNormalActionPerformed
        // Habilita/Desabilita botões e setas a configurações dos botões
        btnNormalToNormal.setEnabled(true);
        isNormalToNormal = false;
        btnMorseToMorse.setEnabled(true);
        isMorseToMorse = false;
        btnNormalToMorse.setEnabled(true);
        isNormalToMorse = false;
        btnMorseToNormal.setEnabled(false);
        isMorseToNormal = true;
        txtEnviar.setText("");
        //Limpa o txtEnviar a cada troca de funcao
    }//GEN-LAST:event_btnMorseToNormalActionPerformed

    private void txtEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEnviarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEnviarActionPerformed
//JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage());
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String nomeAux = null;
                String ipAux = null;
                int portaAux = 0;
                new ChatCliente(nomeAux, ipAux, portaAux).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnMorseToMorse;
    private javax.swing.JButton btnMorseToNormal;
    private javax.swing.JButton btnNormalToMorse;
    private javax.swing.JButton btnNormalToNormal;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtEnviar;
    private javax.swing.JTextArea txtaReceber;
    // End of variables declaration//GEN-END:variables
    private void configurarRede() {
        try {
            socket = new Socket(ip, porta);
            escritor = new PrintWriter(socket.getOutputStream());
            leitor = new Scanner(socket.getInputStream());
            new Thread(new EscutaServidor()).start();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage());
        }
    }

    public String ConverterToMorseTempoReal(KeyEvent evt) {
        String retorno = "";

        switch (evt.getKeyCode()) {
            case KeyEvent.VK_A:
                retorno = ".- ";
                break;
            case KeyEvent.VK_B:
                retorno = "-... ";
                break;
            case KeyEvent.VK_C:
                retorno = "-.-. ";
                break;
            case KeyEvent.VK_D:
                retorno = "-.. ";
                break;
            case KeyEvent.VK_E:
                retorno = ". ";
                break;
            case KeyEvent.VK_F:
                retorno = "..-. ";
                break;
            case KeyEvent.VK_G:
                retorno = "--. ";
                break;
            case KeyEvent.VK_H:
                retorno = ".... ";
                break;
            case KeyEvent.VK_I:
                retorno = ".. ";
                break;
            case KeyEvent.VK_J:
                retorno = ".--- ";
                break;
            case KeyEvent.VK_K:
                retorno = "-.- ";
                break;
            case KeyEvent.VK_L:
                retorno = ".-.. ";
                break;
            case KeyEvent.VK_M:
                retorno = "-- ";
                break;
            case KeyEvent.VK_N:
                retorno = "-. ";
                break;
            case KeyEvent.VK_O:
                retorno = "--- ";
                break;
            case KeyEvent.VK_P:
                retorno = ".--. ";
                break;
            case KeyEvent.VK_Q:
                retorno = "--.- ";
                break;
            case KeyEvent.VK_R:
                retorno = ".-. ";
                break;
            case KeyEvent.VK_S:
                retorno = "... ";
                break;
            case KeyEvent.VK_T:
                retorno = "- ";
                break;
            case KeyEvent.VK_U:
                retorno = "..- ";
                break;
            case KeyEvent.VK_V:
                retorno = "...- ";
                break;
            case KeyEvent.VK_W:
                retorno = ".-- ";
                break;
            case KeyEvent.VK_X:
                retorno = "-..- ";
                break;
            case KeyEvent.VK_Y:
                retorno = "-.-- ";
                break;
            case KeyEvent.VK_Z:
                retorno = "--.. ";
                break;
            case KeyEvent.VK_0:
                retorno = "----- ";
                break;
            case KeyEvent.VK_1:
                retorno = ".---- ";
                break;
            case KeyEvent.VK_2:
                retorno = "..--- ";
                break;
            case KeyEvent.VK_3:
                retorno = "...-- ";
                break;
            case KeyEvent.VK_4:
                retorno = "....- ";
                break;
            case KeyEvent.VK_5:
                retorno = "..... ";
                break;
            case KeyEvent.VK_6:
                retorno = "-.... ";
                break;
            case KeyEvent.VK_7:
                retorno = "--... ";
                break;
            case KeyEvent.VK_8:
                retorno = "---.. ";
                break;
            case KeyEvent.VK_9:
                retorno = "----. ";
                break;
            case KeyEvent.VK_NUMPAD0:
                retorno = "----- ";
                break;
            case KeyEvent.VK_NUMPAD1:
                retorno = ".---- ";
                break;
            case KeyEvent.VK_NUMPAD2:
                retorno = "..--- ";
                break;
            case KeyEvent.VK_NUMPAD3:
                retorno = "...-- ";
                break;
            case KeyEvent.VK_NUMPAD4:
                retorno = "....- ";
                break;
            case KeyEvent.VK_NUMPAD5:
                retorno = "..... ";
                break;
            case KeyEvent.VK_NUMPAD6:
                retorno = "-.... ";
                break;
            case KeyEvent.VK_NUMPAD7:
                retorno = "--... ";
                break;
            case KeyEvent.VK_NUMPAD8:
                retorno = "---.. ";
                break;
            case KeyEvent.VK_NUMPAD9:
                retorno = "----. ";
                break;
            case KeyEvent.VK_SPACE:
                retorno = " / ";
                break;

            default: // Caracter nao suportado
                break;
        } // switch

        return retorno;
    }

    public String ConverterNormaltoMorse(String normal) {
        String retorno = "";

        for (int i = 0; i < normal.length(); i++) {
            switch (Character.toUpperCase(normal.charAt(i))) {
                case 'A':
                    retorno += ".- ";
                    break;
                case 'B':
                    retorno += "-... ";
                    break;
                case 'C':
                    retorno += "-.-. ";
                    break;
                case 'D':
                    retorno += "-.. ";
                    break;
                case 'E':
                    retorno += ". ";
                    break;
                case 'F':
                    retorno += "..-. ";
                    break;
                case 'G':
                    retorno += "--. ";
                    break;
                case 'H':
                    retorno += ".... ";
                    break;
                case 'I':
                    retorno += ".. ";
                    break;
                case 'J':
                    retorno += ".--- ";
                    break;
                case 'K':
                    retorno += "-.- ";
                    break;
                case 'L':
                    retorno += ".-.. ";
                    break;
                case 'M':
                    retorno += "-- ";
                    break;
                case 'N':
                    retorno += "-. ";
                    break;
                case 'O':
                    retorno += "--- ";
                    break;
                case 'P':
                    retorno += ".--. ";
                    break;
                case 'Q':
                    retorno += "--.- ";
                    break;
                case 'R':
                    retorno += ".-. ";
                    break;
                case 'S':
                    retorno += "... ";
                    break;
                case 'T':
                    retorno += "- ";
                    break;
                case 'U':
                    retorno += "..- ";
                    break;
                case 'V':
                    retorno += "...- ";
                    break;
                case 'W':
                    retorno += ".-- ";
                    break;
                case 'X':
                    retorno += "-..- ";
                    break;
                case 'Y':
                    retorno += "-.-- ";
                    break;
                case 'Z':
                    retorno += "--.. ";
                    break;
                case '0':
                    retorno += "----- ";
                    break;
                case '1':
                    retorno += ".---- ";
                    break;
                case '2':
                    retorno += "..--- ";
                    break;
                case '3':
                    retorno += "...-- ";
                    break;
                case '4':
                    retorno += "....- ";
                    break;
                case '5':
                    retorno += "..... ";
                    break;
                case '6':
                    retorno += "-.... ";
                    break;
                case '7':
                    retorno += "--... ";
                    break;
                case '8':
                    retorno += "---.. ";
                    break;
                case '9':
                    retorno += "----. ";
                    break;

                case ' ':
                    retorno += " / ";
                    break;

                default: // Caracter nao suportado
                    break;
            } // switch
        }
        return retorno;
    }
    
    public String ConverterMorsetoNormal(String morse) {
        String retorno = "";
        String[] vetMorse = morse.split(" ");
                
        for (int i = 0; i < vetMorse.length; i++) {
            switch (vetMorse[i]) {
                case ".-":
                    retorno += "A";
                    break;
                case "-...":
                    retorno += "B";
                    break;
                case "-.-.":
                    retorno += "C";
                    break;
                case "-..":
                    retorno += "D";
                    break;
                case ".":
                    retorno += "E";
                    break;
                case "..-.":
                    retorno += "F";
                    break;
                case "--.":
                    retorno += "G";
                    break;
                case "....":
                    retorno += "H";
                    break;
                case "..":
                    retorno += "I";
                    break;
                case ".---":
                    retorno += "J";
                    break;
                case "-.-":
                    retorno += "K";
                    break;
                case ".-..":
                    retorno += "L";
                    break;
                case "--":
                    retorno += "M";
                    break;
                case "-.":
                    retorno += "N";
                    break;
                case "---":
                    retorno += "O";
                    break;
                case ".--.":
                    retorno += "P";
                    break;
                case "--.-":
                    retorno += "Q";
                    break;
                case ".-.":
                    retorno += "R";
                    break;
                case "...":
                    retorno += "S";
                    break;
                case "-":
                    retorno += "T";
                    break;
                case "..-":
                    retorno += "U";
                    break;
                case "...-":
                    retorno += "V";
                    break;
                case ".--":
                    retorno += "W";
                    break;
                case "-..-":
                    retorno += "X";
                    break;
                case "-.--":
                    retorno += "Y";
                    break;
                case "--..":
                    retorno += "Z";
                    break;
                case "-----":
                    retorno += "0";
                    break;
                case ".----":
                    retorno += "1";
                    break;
                case "..---":
                    retorno += "2";
                    break;
                case "...--":
                    retorno += "3";
                    break;
                case "....-":
                    retorno += "4";
                    break;
                case ".....":
                    retorno += "5";
                    break;
                case "-....":
                    retorno += "6";
                    break;
                case "--...":
                    retorno += "7";
                    break;
                case "---..":
                    retorno += "8";
                    break;
                case "----.":
                    retorno += "9";
                    break;

                case "/":
                    retorno += " ";
                    break;

                default: // Caracter nao suportado
                    break;
            } // switch
        }
        return retorno;
    }
}
